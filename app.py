import streamlit as st
import re
import json
import os
from google import genai
from google.genai import types

os.environ['GEMINI_API_KEY'] = st.secrets['GEMINI_API_KEY']

# ะะพะปััะตะฝะธะต API ะบะปััะฐ ะธะท ะฟะตัะตะผะตะฝะฝะพะน ะพะบััะถะตะฝะธั
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
MODEL_TEMPERATURE = 1
MODEL_TOP_P = 0.95 

# ะคัะฝะบัะธั ะดะปั ะธะทะฒะปะตัะตะฝะธั JSON ะธะท ะพัะฒะตัะฐ ะผะพะดะตะปะธ
def extract_code_json(markdown_string):
    matches = re.compile(r'```(?:json)?\n(.*?)\n```', re.DOTALL).findall(markdown_string)
    multi_line_matches = [match.strip() for match in matches if "\n" in match.strip()]
    json_str = "\n\n".join(multi_line_matches)
    try:
        return json.loads(json_str)
    except json.JSONDecodeError:
        try:
            # ะะพะฟัะพะฑัะตะผ ะธัะฟัะฐะฒะธัั ะฝะตะบะพัะพััะต ัะฐัะฟัะพัััะฐะฝะตะฝะฝัะต ะพัะธะฑะบะธ ะฒ JSON
            json_str = json_str.replace("'", '"')
            return json.loads(json_str)
        except:
            st.error("ะัะธะฑะบะฐ ะฟัะธ ะพะฑัะฐะฑะพัะบะต ะพัะฒะตัะฐ ะผะพะดะตะปะธ")
            return []

# ะะปะฐัั ะดะปั ัะฐะฑะพัั ั API Gemini
class APIEasy:
    def __init__(self, api_key, temperature=MODEL_TEMPERATURE, top_p=MODEL_TOP_P):
        self.client = genai.Client(api_key=api_key)
        self.config_model = types.GenerateContentConfig(
            temperature=temperature,
            top_p=top_p,
        )

    def send_message(self, prompt):
        try:
            response = self.client.models.generate_content(
                model="gemini-2.0-flash", 
                contents=prompt, 
                config=self.config_model
            )
            return response.text
        except Exception as e:
            st.error(f"ะัะธะฑะบะฐ ะฟัะธ ะพะฑัะฐัะตะฝะธะธ ะบ API: {str(e)}")
            return ""

# ะะฐัััะพะนะบะฐ ัััะฐะฝะธัั
st.set_page_config(
    page_title="ะฃะฟัะฐะถะฝะตะฝะธั ะฟะพ ััััะบะพะผั ัะทัะบั",
    page_icon="๐",
)

# ะะฐะณะพะปะพะฒะพะบ ะฟัะธะปะพะถะตะฝะธั
st.title("ะฃะฟัะฐะถะฝะตะฝะธั ะฟะพ ััััะบะพะผั ัะทัะบั")

# ะัะพะฒะตัะบะฐ ะฝะฐะปะธัะธั API ะบะปััะฐ
if not GEMINI_API_KEY:
    st.error("API ะบะปัั ะฝะต ะฝะฐะนะดะตะฝ. ะฃััะฐะฝะพะฒะธัะต ะฟะตัะตะผะตะฝะฝัั ะพะบััะถะตะฝะธั GEMINI_API_KEY.")
    st.stop()

# ะะฝะธัะธะฐะปะธะทะฐัะธั API ั ะบะปััะพะผ ะธะท ะฟะตัะตะผะตะฝะฝะพะน ะพะบััะถะตะฝะธั
api = APIEasy(api_key=GEMINI_API_KEY)

# ะะพะปะต ะดะปั ะฒะฒะพะดะฐ ัะตะผั
theme = st.text_input("ะะฒะตะดะธัะต ัะตะผั ะดะปั ัะฟัะฐะถะฝะตะฝะธะน:", value="ะฝ ะธ ะฝะฝ ะฒ ะฟัะธัะฐััะธัั")

# ะจะฐะฑะปะพะฝ ะฟัะพะผัะฐ
prompt_template = """ะขั - ััะธัะตะปั ััััะบะพะณะพ ัะทัะบะฐ.

** ะขัะตะฑะพะฒะฐะฝะธั ** 
1) ะะดะฝะพ ัะฟัะฐะถะฝะตะฝะธะต - ะพะดะฝะพ ะฟัะตะดะปะพะถะตะฝะธะต
2) ะ ะบะฐะถะดะพะผ ะฟัะตะดะปะพะถะตะฝะธะธ ะดะพะปะถะตะฝ ะฑััั ะฟัะพะฟััะบ, ะพะฑะพะทะฝะฐัะตะฝะฝัะน ะผะฝะพะณะพัะพัะธะตะผ (...)
3) ะัะพะฟััะบ ะดะพะปะถะตะฝ ะฑััั ะฝะฐ ะผะตััะต, ะณะดะต ะฝัะถะฝะพ ะฒััะฐะฒะธัั ะฟัะฐะฒะธะปัะฝัั ะฑัะบะฒั ะธะปะธ ะฑัะบะฒั
4) ะกะพะทะดะฐะน 5 ัะฟัะฐะถะฝะตะฝะธะน

** ะคะพัะผะฐั ะพัะฒะตัะฐ ะฟัะธะผะตั **
ะ Json
[
    {"ัะฟัะฐะถะฝะตะฝะธะต": "ะะฐัะต...ัะน ะบะฐััะพัะตะปั ะฑัะป ะพัะตะฝั ะฒะบััะฝัะผ.", "ะพัะฒะตั": "ะฝะฝ"},
    {"ัะฟัะฐะถะฝะตะฝะธะต": "ะัะฐัะต...ัะน ะฟะพะป ะฑะปะตััะตะป ะฒ ะปััะฐั ัะพะปะฝัะฐ.", "ะพัะฒะตั": "ะฝ"},
    {"ัะฟัะฐะถะฝะตะฝะธะต": "...", "ะพัะฒะตั": "..."},
    {"ัะฟัะฐะถะฝะตะฝะธะต": "...", "ะพัะฒะตั": "..."},
    {"ัะฟัะฐะถะฝะตะฝะธะต": "...", "ะพัะฒะตั": "..."}
]
"""
prompt_template1 = """** ะขะตะผะฐ **
{theme}
"""

# ะคะพัะผะธัะพะฒะฐะฝะธะต ะฟัะพะผัะฐ ั ะฒัะฑัะฐะฝะฝะพะน ัะตะผะพะน
prompt = prompt_template1.format(theme=theme)
prompt = prompt_template + prompt

if st.button("ะกะณะตะฝะตัะธัะพะฒะฐัั ัะฟัะฐะถะฝะตะฝะธั"):
    with st.spinner("ะะตะฝะตัะฐัะธั ัะฟัะฐะถะฝะตะฝะธะน..."):
        response = api.send_message(prompt)
        if response:
            exercises = extract_code_json(response)
            if exercises and isinstance(exercises, list):
                # ะกะพััะฐะฝัะตะผ ัะฟัะฐะถะฝะตะฝะธั ะฒ session_state
                st.session_state.exercises = exercises
                st.session_state.user_answers = [""] * len(exercises)
                st.success(f"ะกะณะตะฝะตัะธัะพะฒะฐะฝะพ {len(exercises)} ัะฟัะฐะถะฝะตะฝะธะน!")
            else:
                st.error("ะะต ัะดะฐะปะพัั ะฟะพะปััะธัั ัะฟัะฐะถะฝะตะฝะธั ะฒ ะฟัะฐะฒะธะปัะฝะพะผ ัะพัะผะฐัะต")

# ะัะพะฑัะฐะถะตะฝะธะต ัะฟัะฐะถะฝะตะฝะธะน ะธ ะฒะฒะพะด ะพัะฒะตัะพะฒ
if 'exercises' in st.session_state and st.session_state.exercises:
    st.subheader("ะฃะฟัะฐะถะฝะตะฝะธั")
    
    for i, exercise in enumerate(st.session_state.exercises):
        col1, col2 = st.columns([3, 1])
        
        # ะะพะปััะฐะตะผ ัะตะบัั ัะฟัะฐะถะฝะตะฝะธั
        exercise_text = exercise.get("ัะฟัะฐะถะฝะตะฝะธะต", "")
        
        with col1:
            st.markdown(f"**{i+1}. {exercise_text}**")
        
        with col2:
            # ะะพะปะต ะดะปั ะฒะฒะพะดะฐ ะพัะฒะตัะฐ
            st.session_state.user_answers[i] = st.text_input(
                f"ะัะฒะตั {i+1}", 
                key=f"answer_{i}",
                value=st.session_state.user_answers[i] if 'user_answers' in st.session_state else ""
            )
    
    # ะะฝะพะฟะบะฐ ะฟัะพะฒะตัะบะธ
    if st.button("ะัะพะฒะตัะธัั ะพัะฒะตัั"):
        correct_count = 0
        
        for i, exercise in enumerate(st.session_state.exercises):
            user_answer = st.session_state.user_answers[i].strip()
            correct_answer = exercise.get("ะพัะฒะตั", "").strip()
            
            if user_answer.lower() == correct_answer.lower():
                st.success(f"{i+1}. ะัะฐะฒะธะปัะฝะพ! ะัะฒะตั: {correct_answer}")
                correct_count += 1
            else:
                st.error(f"{i+1}. ะะตะฟัะฐะฒะธะปัะฝะพ. ะะฐั ะพัะฒะตั: {user_answer}, ะัะฐะฒะธะปัะฝัะน ะพัะฒะตั: {correct_answer}")
        
        # ะัะพะณะพะฒัะน ัะตะทัะปััะฐั
        st.markdown(f"### ะัะพะณ: {correct_count} ะธะท {len(st.session_state.exercises)} ะฟัะฐะฒะธะปัะฝัั ะพัะฒะตัะพะฒ")
        percentage = (correct_count / len(st.session_state.exercises)) * 100
        st.progress(percentage / 100)
        
        if percentage == 100:
            st.balloons()
            st.markdown("## ๐ ะัะปะธัะฝะพ!")
        elif percentage >= 70:
            st.markdown("## ๐ ะฅะพัะพัะธะน ัะตะทัะปััะฐั!")
        else:
            st.markdown("## ๐ ะัะพะดะพะปะถะฐะนัะต ะฟัะฐะบัะธะบะพะฒะฐัััั!") 
